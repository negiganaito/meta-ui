import { InternalEnum } from '../$internal-enum';

const DEFAULT_ALLOWED_SCHEMES = new Set([
  'about',
  'accountscenter',
  'aidemos',
  'aistudio',
  'apk',
  'blob',
  'cmms',
  'fb',
  'fba',
  'fbatwork',
  'fb-ama',
  'fb-internal',
  'fb-workchat',
  'fb-workchat-secure',
  'fb-messenger',
  'fb-messenger-public',
  'fb-messenger-group-thread',
  'fb-page-messages',
  'fb-pma',
  'fbcf',
  'fbconnect',
  'fbinternal',
  'fbmobilehome',
  'fbrpc',
  'file',
  'flipper',
  'ftp',
  'gtalk',
  'http',
  'https',
  'mailto',
  'wss',
  'ms-app',
  'intent',
  'itms',
  'itms-apps',
  'itms-services',
  'lasso',
  'market',
  'svn+ssh',
  'fbstaging',
  'tel',
  'sms',
  'pebblejs',
  'sftp',
  'whatsapp',
  'moments',
  'flash',
  'fblite',
  'chrome-extension',
  'webcal',
  'instagram',
  'iglite',
  'fb124024574287414',
  'fb124024574287414rc',
  'fb124024574287414master',
  'fb1576585912599779',
  'fb929757330408142',
  'designpack',
  'fbpixelcloud',
  'fbapi20130214',
  'fb1196383223757595',
  'tbauth',
  'oculus',
  'oculus.store',
  'oculus.feed',
  'oculusstore',
  'socialplatform',
  'odh',
  'com.oculus.rd',
  'aria',
  'skype',
  'ms-windows-store',
  'callto',
  'messenger',
  'workchat',
  'fb236786383180508',
  'fb1775440806014337',
  'data',
  'fb-mk',
  'munki',
  'origami-file',
  'fb-nimble-vrsrecorder',
  'fb-nimble-monohandtrackingvis',
  'together',
  'togetherbl',
  'horizonlauncher',
  'venues',
  'whatsapp-consumer',
  'whatsapp-smb',
  'fb-ide-opener',
  'fb-vscode',
  'fb-vscode-insiders',
  'editor',
  'spark-studio',
  'spark-player',
  'spark-simulator',
  'arstudio',
  'manifold',
  'origami-internal',
  'origami-public',
  'stella',
  'mwa',
  'mattermost',
  'logaggregator',
  'pcoip',
  'cinema',
  'home',
  'oculus360photos',
  'systemux',
  'moonstone',
  'upi',
  'q4bconfigurator',
  'q4bnux',
  'fb-viewapp',
  'x-safari-https',
]);

const Options = InternalEnum({
  EXPLICITLY_ALLOWED_SCHEMES_ONLY: 'explicitly_allowed_schemes_only',
  INCLUDE_DEFAULTS: 'include_defaults',
});

function isAllowed(scheme, option = Options.INCLUDE_DEFAULTS, customAllowedSchemes) {
  if (!scheme || scheme === '') {
    return true;
  }

  const lowerCaseScheme = scheme.toLowerCase();
  return (
    (customAllowedSchemes && customAllowedSchemes.has(lowerCaseScheme)) ||
    (option === Options.INCLUDE_DEFAULTS && DEFAULT_ALLOWED_SCHEMES.has(lowerCaseScheme))
  );
}

export const URISchemes = {
  Options,
  isAllowed,
};
